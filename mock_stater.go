// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/rs/xstats/xstats.go
//
// Generated by this command:
//
//	mockgen -source=vendor/github.com/rs/xstats/xstats.go -destination=mock_stater.go -package=stat
//

// Package stat is a generated GoMock package.
package stat

import (
	reflect "reflect"
	time "time"

	xstats "github.com/rs/xstats"
	gomock "go.uber.org/mock/gomock"
)

// MockXStater is a mock of XStater interface.
type MockXStater struct {
	ctrl     *gomock.Controller
	recorder *MockXStaterMockRecorder
	isgomock struct{}
}

// MockXStaterMockRecorder is the mock recorder for MockXStater.
type MockXStaterMockRecorder struct {
	mock *MockXStater
}

// NewMockXStater creates a new mock instance.
func NewMockXStater(ctrl *gomock.Controller) *MockXStater {
	mock := &MockXStater{ctrl: ctrl}
	mock.recorder = &MockXStaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXStater) EXPECT() *MockXStaterMockRecorder {
	return m.recorder
}

// AddTags mocks base method.
func (m *MockXStater) AddTags(tags ...string) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddTags", varargs...)
}

// AddTags indicates an expected call of AddTags.
func (mr *MockXStaterMockRecorder) AddTags(tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockXStater)(nil).AddTags), tags...)
}

// Count mocks base method.
func (m *MockXStater) Count(stat string, count float64, tags ...string) {
	m.ctrl.T.Helper()
	varargs := []any{stat, count}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Count", varargs...)
}

// Count indicates an expected call of Count.
func (mr *MockXStaterMockRecorder) Count(stat, count any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{stat, count}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockXStater)(nil).Count), varargs...)
}

// Gauge mocks base method.
func (m *MockXStater) Gauge(stat string, value float64, tags ...string) {
	m.ctrl.T.Helper()
	varargs := []any{stat, value}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Gauge", varargs...)
}

// Gauge indicates an expected call of Gauge.
func (mr *MockXStaterMockRecorder) Gauge(stat, value any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{stat, value}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockXStater)(nil).Gauge), varargs...)
}

// GetTags mocks base method.
func (m *MockXStater) GetTags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockXStaterMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockXStater)(nil).GetTags))
}

// Histogram mocks base method.
func (m *MockXStater) Histogram(stat string, value float64, tags ...string) {
	m.ctrl.T.Helper()
	varargs := []any{stat, value}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Histogram", varargs...)
}

// Histogram indicates an expected call of Histogram.
func (mr *MockXStaterMockRecorder) Histogram(stat, value any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{stat, value}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockXStater)(nil).Histogram), varargs...)
}

// Timing mocks base method.
func (m *MockXStater) Timing(stat string, value time.Duration, tags ...string) {
	m.ctrl.T.Helper()
	varargs := []any{stat, value}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Timing", varargs...)
}

// Timing indicates an expected call of Timing.
func (mr *MockXStaterMockRecorder) Timing(stat, value any, tags ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{stat, value}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockXStater)(nil).Timing), varargs...)
}

// MockCopier is a mock of Copier interface.
type MockCopier struct {
	ctrl     *gomock.Controller
	recorder *MockCopierMockRecorder
	isgomock struct{}
}

// MockCopierMockRecorder is the mock recorder for MockCopier.
type MockCopierMockRecorder struct {
	mock *MockCopier
}

// NewMockCopier creates a new mock instance.
func NewMockCopier(ctrl *gomock.Controller) *MockCopier {
	mock := &MockCopier{ctrl: ctrl}
	mock.recorder = &MockCopierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCopier) EXPECT() *MockCopierMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockCopier) Copy() xstats.XStater {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(xstats.XStater)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockCopierMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockCopier)(nil).Copy))
}

// MockScoper is a mock of Scoper interface.
type MockScoper struct {
	ctrl     *gomock.Controller
	recorder *MockScoperMockRecorder
	isgomock struct{}
}

// MockScoperMockRecorder is the mock recorder for MockScoper.
type MockScoperMockRecorder struct {
	mock *MockScoper
}

// NewMockScoper creates a new mock instance.
func NewMockScoper(ctrl *gomock.Controller) *MockScoper {
	mock := &MockScoper{ctrl: ctrl}
	mock.recorder = &MockScoperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoper) EXPECT() *MockScoperMockRecorder {
	return m.recorder
}

// Scope mocks base method.
func (m *MockScoper) Scope(scope string, scopes ...string) xstats.XStater {
	m.ctrl.T.Helper()
	varargs := []any{scope}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scope", varargs...)
	ret0, _ := ret[0].(xstats.XStater)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockScoperMockRecorder) Scope(scope any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{scope}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockScoper)(nil).Scope), varargs...)
}
